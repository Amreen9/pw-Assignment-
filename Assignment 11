QI. What is an Exception in python? Write the difference between Exceptions and Syntax errors.
Ans:
      Errors and exceptions are types of runtime errors in Python.
      Errors are issues in a program that prevent it from completing its task.
      Exceptions are conditions that interrupt the normal flow of the program.
      Both errors and exceptions occur during the execution of a program.
      Syntax errors are a type of error that occurs when the proper syntax of the language is not followed.
      Logical errors or exceptions occur during the execution of a program after it has passed the syntax test.
      Exceptions can be handled using try-except blocks.
_________________________________________________________________________________________________________
Q2. What happens when an exception is not handled? Explain with an example.
Ans:
When an exception is not handled, it will cause the program to terminate abruptly, 
and an error message will be displayed. The error message will contain information about the type of exception that occurred and the line number where the exception occurred1.
For example, consider the following code:
    try:
        num1 = int(input("Enter a number: "))
        num2 = int(input("Enter another number: "))
        result = num1 / num2
        print("Result: ", result)
    except ValueError:
        print("Invalid input")
_________________________________________________________________________________________________________

Q3. Which Python statements are used to catch and handle exceptions? Explain with an example.
Ans:
In Python, the try and except statement are used to catch and handle exceptions
The try block contains the code that may raise an exception, and the except block contains the code that handles​​ the exception if it occurs
The genera syntax for using try and except] statements is as follows:
    try:
    # code that may raise an exception
    except ExceptionType:
    # code to handle the exception
    
example:
     try:
    num1 = int(input("Enter a number: "))
    num2 = int(input("Enter another number: "))
    result = num1 / num2
    print("Result: ", result)
    except ValueError:
        print("Invalid input")
    except ZeroDivisionError:
        print("Cannot divide by zero")
_________________________________________________________________________________________________________

Q4. Explain with an example:
  a. try and else
  b. finally
  c. raise
Ans:
a. try and else: In Python, the else block can be used with the try statement to execute code when there is no exception raised in the try block.
The else block is executed only if the try block does not raise an exception. For example:
      try:
          num1 = int(input("Enter a number: "))
          num2 = int(input("Enter another number: "))
      except ValueError:
          print("Invalid input")
      else:
          result = num1 / num2
          print("Result: ", result)

  In this code, the try block contains the code that may raise a ValueError exception. 
  If the user enters a non-numeric value for num1 or num2, the program will catch the ValueError exception and print "Invalid input".
  If no exception is raised, the else block will be executed, which calculates the result and prints it.
  b. finally:
  The finally block is used with the try statement to execute code regardless of whether an exception is raised or not24. For example:
  try:
    # code that may raise an exception
    except:
    # code to handle the exception
,,,,finally:
    # code that will always be executed

    In this code, the try block contains the code that may raise an exception. 
    The except block contains the code that handles the exception if it occurs.
    The finally block contains the code that will always be executed, regardless of whether an exception is raised or not.
    c. raise: The raise statement is used to raise an exception manually in Python. For example:
    x = -1
    if x < 0:
        raise ValueError("x cannot be negative")

In this code, the raise statement is used to raise a ValueError exception if x is negative. 
The ValueError exception will be caught by the nearest except block that handles ValueError exceptions.
_________________________________________________________________________________________________________

Q5. What are Custom Exceptions in python? Why do we need Custom Exceptions? Explain with an example.
Ans:
    1.  Exceptions in Python are events that occur during the execution of a program that disrupt the normal flow of the program's instructions.
    2.  The try and except block in Python is used to catch and handle exceptions.
    3.  The try block contains the code that may raise an exception, and the except block contains the code that handles the exception if it occurs.
    4.  Custom exceptions can be defined in Python by creating a new class that is derived from the built-in Exception class.
    5.  Custom exceptions are useful when we want to raise an exception that is specific to our program or application.
    6.  The else block can be used with the try statement to execute code when there is no exception raised in the try block.
    7.  The finally block is used with the try statement to execute code regardless of whether an exception is raised or not.
    8.  The raise statement is used to raise an exception manually in Python.
_________________________________________________________________________________________________________

Q6. Create a custom exception class. Use this class to handle an exception.
Ans:
     class NegativeNumberError(Exception):
        def __init__(self, message="Number cannot be negative"):
            self.message = message
            super().__init__(self.message)
    x = -1
    if x < 0: 
        raise NegativeNumberError 
_________________________________________________________________________________________________________
