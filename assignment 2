Q1. Which keyword is used to create a function? Create a function to return a list of odd numbers in the
range of 1 to 25.
Ans: def keyword is used to create a function.
# function to return a list of odd num (range 1 to 25)
def odd_list():
    l = []
    for num in range(1,25):
        if num%2 != 0 :
            l.append(num)
    return l
print("List of odd number is :",odd_list())

Q2. Why *args and **kwargs is used in some functions? Create a function each for *args and **kwargs
to demonstrate their use.
Ans:
*args and **kwargs are special syntax in Python that allow functions to accept a variable number of arguments.

*args is used to pass a variable number of non-keyword arguments to a function. 
It is represented by an asterisk (*) followed by a variable name (conventionally args). 
When the function is Knows, all the non-keyword arguments are passed as a tuple to the *args parameter.

**kwargs is used to pass a variable number of keyword arguments to a function. 
It is represented by two asterisks (**) followed by a variable name (conventionally kwargs).
When the function is Knows, all the keyword arguments are passed as a dictionary to the **kwargs parameter.

Here are examples of functions that use *args and **kwargs respectively:
# Example of function that uses *args
def sum_numbers(*args):
    total = 0
    for num in args:
        total += num
    return total

# Call the function with different number of arguments
print(sum_numbers(1, 2, 3)) 
# Output: 6

# Example of function **kwargs
def print_info(**kwargs):
    for key, value in kwargs.items():
        print(key, ":", value)

# Call function with different keyword arguments
print_info(name="Mahesh", age=18, country="India")
# Output: name : Mahesh
#         age : 18
#         country : India

Q3. What is an iterator in python? Name the method used to initialise the iterator object and the method
used for iteration. Use these methods to print the first five elements of the given list [2, 4, 6, 8, 10, 12, 14,
16, 18, 20].
Ans:
In Python, an iterator is an object that implements the iterator protocol, which consists of the __iter__() and __next__() methods. 
An iterator is used to step through a collection of items one by one, allowing sequential access to the elements without
needing to know the underlying structure of the collection.

The __iter__() method is used to initialize the iterator object and returns the object itself.
The __next__() method is used to retrieve the next element in the iterator.

Here's an example of using an iterator to print the first five elements of the list [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]:
# Create an iterator object for the list
list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
iterator = iter(list)

# Iterate through the first five elements of list
for i in range(5):
    # Get the next element using the iterator's __next__() method
    element = next(iterator)
    # Print the element
    print(element)

Q4. What is a generator function in python? Why yield keyword is used? Give an example of a generator
function.
Ans:
A generator function in Python is a type of function that produces a sequence of values on-the-fly as it is being iterated.
It uses the yield keyword to produce each value one at a time and pause execution until the next value is requested.
Generator functions are memory-efficient and useful for producing large sequences of values.

#making a function
def squares(n):
    for i in range(n):
        yield i**2

# Create a generator object from the squares() generator function
generator = squares(5)

# Iterate through the values produced by the generator
for square in generator:
    print(square)

Q5. Create a generator function for prime numbers less than 1000. Use the next() method to print the
first 20 prime numbers.
Ans:
# function for prime
def prime():
    yield 2  # 1st prime number
    prime_list = [2]
    n = 3
    while n < 1000:
        is_prime = True
        for prime in prime_list:
            if n % prime == 0:
                is_prime = False
                break
            if prime**2 > n:
                break
        if is_prime:
            prime_list.append(n)
            yield n
        n += 2  # Check only odd numbers

# generator object from the primes() generator function
prime_generator = prime()

# next() method to print the first 20 prime nos
for i in range(20):
    print(next(prime_generator))
#output:
2
3
5
7
11
13
17
19
23
29
31
37
41
43
47
53
59
61
67
71

Q6. Write a python program to print the first 10 Fibonacci numbers using a while loop.
Ans:
# initialize the series
a, b = 0, 1
count = 0

# while loop to generate the series
while counter < 10:
    print(a, end=" ")
    # update the values 
    c = a + b
    a = b
    b = c
    counter += 1
#output : 0 1 1 2 3 5 8 13 21 34

Q7. Write a List Comprehension to iterate through the given string: ‘pwskills’.
Expected output: ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']
Ans:
s = 'pwskills'
print([char for char in s if char in s])
#output : ['p', 'w', 's', 'k', 'i', 'l', 'l', 's']

Q8. Write a python program to check whether a given number is Palindrome or not using a while loop.
Ans: 
# taking input
num = int(input("Enter a number: "))

temp = num
reverse_num = 0

while temp > 0:
    digit = temp % 10
    reverse_num = (reverse_num * 10) + digit
    temp //= 10

# check if palindrome or not
if num == reverse_num:
    print(num, "is a Palindrome number")
else:
    print(num, "is not a Palindrome number")
    
#Output :Enter a number: 121
#        121 is a Palindrome number

Q9. Write a code to print odd numbers from 1 to 100 using list comprehension.
Note: Use a list comprehension to create a list from 1 to 100 and use another List comprehension to filter
out odd numbers.
Ans: 

# List comprehension to create a list 1 to 100
num_list = [num for num in range(1, 101)]

# List comprehension to filter out odd numbers
odd_list = [num for num in num_list if num % 2 != 0]

# print the odd number
print(odd_list)

#output : [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]



